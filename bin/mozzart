#!/usr/bin/env node

'use strict';

const spawn     = require(`child_process`).spawn;
const util      = require(`util`);
const StdStream = require(`../lib/StdStream`);
const forever   = require(`forever-monitor`);
const config    = require(`../lib/config`);

// default = false
config.silent = config.silent === true;

const runDef = def => new Promise(resolve => { // eslint-disable-line
  def.cwd  = def.cwd.replace(/\/$/g, ``);
  def.name = def.cwd.split(`/`).reverse()[0];
  const foreverOptions = {
    max            : Number.POSITIVE_INFINITY,
    silent         : true,
    args           : def.arguments,
    sourceDir      : def.cwd,
    cwd            : def.cwd,
    fork           : true,
    minUpTime      : 2000,
    spinSleepTime  : 200,
  };
  if (config.watch) {
    foreverOptions.watch          = true;
    foreverOptions.watchDirectory = def.cwd;
  }
  const proc = new forever.Monitor(def.file, foreverOptions);
  if (!config.silent) {
    const stdout = new StdStream(`[${def.name}]`);
    proc.on(`stdout`, data => stdout.liner.write(data));
  }
  const stderr = new StdStream(`[${def.name}] [error]`);
  proc.on(`stderr`, data => stderr.liner.write(data));
  def.process = proc;

  proc.start();

  if (def.sync !== true) { return resolve(); }

  proc.on(`message`, msg => {
    if (msg === `PROCESS_READY`) { return resolve(); }
  });
});

let defIndex = 0;

const runNextDef = async () => {
  const def = config.processes[defIndex];
  const timeout = config.wait || 1;
  if (!def) {
    return util.log(`[mozzart] All processes are running`);
  }
  await runDef(def);

  return setTimeout(() => {
    defIndex++;
    runNextDef();
  }, timeout);
};

util.log(`[mozzart] Starting all processes`);
runNextDef();

process.on(`SIGINT`, () => {
  console.log(``); // eslint-disable-line // Line break
  util.log(`[mozzart] Shutting down all processes`);
  config.processes.forEach(definition => {
    definition.process.kill();
    util.log(`[mozzart] Process [${definition.name}] killed`);
  });
  process.exit(0); // eslint-disable-line
});
