#!/usr/bin/env node

'use strict';

const _ = require(`lodash`);
const config = require(`../lib/config`);
const pack = require(`../package.json`);
const startAll = require(`./startAll`);
const listProcesses = require(`./list`);
const log = require(`../lib/log`);
const registry = require(`../lib/registry`);

const showVersion = () => {
  console.log(`mozzart@${pack.version}`);

  process.exit(0);
};

const resume = async uid => {
  log(`Starting ${uid}...`);
  const pid = await registry.getPid(uid);

  if (pid) { return log(`Already running`); }

  await registry.setAuto(uid, false);
  await registry.addResumeUid(uid);
  const mozzReg = await registry.get(`mozzart`);

  return process.kill(mozzReg.pid, `SIGCONT`);
};

const stop = async uid => {
  log(`Stopping ${uid}...`);
  await registry.setAuto(uid, false);
  const pid = await registry.getPid(uid);

  if (!pid) { return log(`Not running`); }

  try {
    process.kill(pid, `SIGKILL`);
  } catch (e) {}

  return Promise.resolve();
};

const restart = async uid => {
  await stop(uid);
  const isAuto = await registry.isAuto(uid);

  if (!isAuto) {
    setTimeout(() => resume(uid), 500);
  }
};

const remove = async uid => {
  await stop(uid);
  log(`Removing ${uid}...`);
  await registry.addRemoveUid(uid);
  const mozzReg = await registry.get(`mozzart`);

  return process.kill(mozzReg.pid, `SIGCONT`);
};

const update = async () => {
  console.log(config.processes);
};

if (config.command === `showVersion`) {
  showVersion();
} else if (config.command === `start`) {
  startAll();
} else if (config.command === `resume`) {
  resume(config.uidForCmd);
} else if (config.command === `restart`) {
  restart(config.uidForCmd);
} else if (config.command === `stop`) {
  stop(config.uidForCmd);
} else if (config.command === `remove`) {
  remove(config.uidForCmd);
} else if (config.command === `update`) {
  update();
} else if (config.command === `listProcesses`) {
  listProcesses();
}

process.on(`SIGINT`, async () => {
  console.log(``); // eslint-disable-line // Line break
  log(`[mozzart] Shutting down all processes`);
  const processes = await registry.getProcesses();
  await Promise.all(
    processes.map(async process => {
      const definition = registry.locals.runningDefs[process.uid];
      definition.isKilling = true;
      await stop(process.uid);

      return new Promise(resolve =>
        setTimeout(() => {
          log(`[mozzart] Process [${definition.name}] killed`);
          resolve();
        }, 200)
      );
    })
  );
  await registry.clean();
  process.exit(0); // eslint-disable-line
});
