#!/usr/bin/env node

'use strict';

const { spawn } = require(`child_process`);
const _ = require(`lodash`);
const fs = require(`fs-extra`);
const stop = require(`./stop`);
const resume = require(`./resume`);
const config = require(`../lib/config`);
const env = require(`../lib/env`);
const pack = require(`../package.json`);
const startAll = require(`./startAll`);
const listProcesses = require(`./list`);
const log = require(`../lib/log`);
const registry = require(`../lib/registry`);

const showVersion = () => {
  console.log(`mozzart@${pack.version}`);

  process.exit(0);
};

const restart = async uid => {
  await stop(uid);
  const isAuto = await registry.isAuto(uid);

  if (!isAuto) {
    setTimeout(() => resume(uid), 500);
  }
};

const remove = async (uid, silent = false) => {
  await stop(uid);
  log(`Removing ${uid}...`);
  await registry.addRemoveUid(uid);
  const mozzartPid = await registry.getMozzartPid();

  if (silent) { return Promise.resolve(); }

  return process.kill(mozzartPid, `SIGCONT`);
};

const addIdentifierToProc = proc => ({
  ...proc,
  $identifier : `${proc.cwd}/${proc.file}`,
});

const update = async () => {
  const currentProcesses = (await registry.getProcesses()).map(addIdentifierToProc);
  const configProcesses = config.processes.map(addIdentifierToProc);

  const processesToRemove = _.filter(currentProcesses, currentProcess =>
    !_.find(configProcesses, proc => proc.$identifier === currentProcess.$identifier)
  );

  const definitionsToAdd = _.filter(configProcesses, proc =>
    !_.find(currentProcesses, currentProcess => proc.$identifier === currentProcess.$identifier)
  );

  for (const proc of processesToRemove) { await remove(proc.uid); }
  for (const def of definitionsToAdd) { await registry.addStartDef(def); }

  const mozzartPid = await registry.getMozzartPid();

  return process.kill(mozzartPid, `SIGCONT`);
};

const logProcess = async uid => {
  const logPath = env.logPath(uid);
  const exists = await fs.exists(logPath);

  if (!exists) { return log(`No log file found for ${uid}`); }

  spawn(`tail`, [`-f`, logPath], { stdio : `inherit` });
};

if (config.command === `showVersion`) {
  showVersion();
} else if (config.command === `start`) {
  startAll();
} else if (config.command === `resume`) {
  resume(config.uidForCmd);
} else if (config.command === `restart`) {
  restart(config.uidForCmd);
} else if (config.command === `stop`) {
  stop(config.uidForCmd);
} else if (config.command === `remove`) {
  remove(config.uidForCmd);
} else if (config.command === `update`) {
  update();
} else if (config.command === `logProcess`) {
  logProcess(config.uidForCmd);
} else if (config.command === `listProcesses`) {
  listProcesses();
}
