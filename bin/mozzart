#!/usr/bin/env node

'use strict';

const _ = require(`lodash`);
const config = require(`../lib/config`);
const pack = require(`../package.json`);
const startAll = require(`./startAll`);
const listProcesses = require(`./list`);
const log = require(`../lib/log`);
const registry = require(`../lib/registry`);

const showVersion = () => {
  console.log(`mozzart@${pack.version}`);

  process.exit(0);
};

const start = async uid => {
  log(`Starting ${uid}`);
  await registry.setAuto(uid, false);
  await registry.addResumeUid(uid);
  const mozzReg = await registry.get(`mozzart`);
  process.kill(mozzReg.pid, `SIGCONT`);
};

const stop = async uid => {
  log(`Stopping ${uid}`);
  await registry.setAuto(uid, false);
  const pid = await registry.getPid(uid);

  process.kill(pid);
};

if (config.command === `showVersion`) {
  showVersion();
} else if (config.command === `startAll`) {
  startAll();
} else if (config.command === `start`) {
  start(config.uidForCmd);
} else if (config.command === `stop`) {
  stop(config.uidForCmd);
} else if (config.command === `listProcesses`) {
  listProcesses();
}

process.on(`SIGINT`, async () => {
  console.log(``); // eslint-disable-line // Line break
  log(`[mozzart] Shutting down all processes`);
  await Promise.all(
    _.map(registry.locals.runningDefs, definition => {
      definition.isKilling = true;
      definition.process.kill(`SIGKILL`);

      return new Promise(resolve =>
        setTimeout(() => {
          log(`[mozzart] Process [${definition.name}] killed`);
          resolve();
        }, 200)
      );
    })
  );
  await registry.clean();
  process.exit(0); // eslint-disable-line
});
